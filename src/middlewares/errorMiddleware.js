/**
 * Middleware x·ª≠ l√Ω l·ªói to√†n c·ª•c
 */
const logger = require('../utils/logger');
const ApiError = require('../utils/apiError'); // Import ApiError for clarity and potential future use

// Helper function to handle specific errors
const handleCastErrorDB = err => {
  const message = `Gi√° tr·ªã kh√¥ng h·ª£p l·ªá ${err.path}: ${err.value}.`;
  return new ApiError(message, 400);
};

const handleValidationErrorDB = err => {
  const errors = Object.values(err.errors).map(el => el.message);
  const message = `D·ªØ li·ªáu nh·∫≠p kh√¥ng h·ª£p l·ªá. ${errors.join('. ')}`;
  return new ApiError(message, 400);
};

const handleJWTError = () => new ApiError('Token kh√¥ng h·ª£p l·ªá. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.', 401);
const handleJWTExpiredError = () => new ApiError('Token ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.', 401);


const errorMiddleware = (err, req, res, next) => {
  let error = { ...err }; // Create a copy to avoid mutating the original err object directly
  error.message = err.message; // Ensure message is copied
  error.statusCode = err.statusCode || 500;
  error.status = err.status || 'error';

  // M√¥i tr∆∞·ªùng development: g·ª≠i to√†n b·ªô th√¥ng tin l·ªói
  if (process.env.NODE_ENV === 'development') {
    res.status(err.statusCode).json({
      status: err.status,
      message: err.message,
      error: err,
      stack: err.stack
    });
  } 
  // M√¥i tr∆∞·ªùng production: ch·ªâ g·ª≠i th√¥ng b√°o l·ªói ƒë∆°n gi·∫£n
  else {
    // L·ªói ho·∫°t ƒë·ªông (operational error): g·ª≠i th√¥ng b√°o ƒë·∫øn client
    if (err.isOperational) {
      res.status(err.statusCode).json({
        status: err.status,
        message: err.message
      });
    } 
    // L·ªói l·∫≠p tr√¨nh ho·∫∑c l·ªói kh√¥ng x√°c ƒë·ªãnh: X·ª≠ l√Ω c√°c l·ªói c·ª• th·ªÉ tr∆∞·ªõc
    else {
      // Handle specific errors first
      if (error.name === 'CastError') error = handleCastErrorDB(error);
      if (error.name === 'ValidationError') error = handleValidationErrorDB(error);
      if (error.name === 'JsonWebTokenError') error = handleJWTError();
      if (error.name === 'TokenExpiredError') error = handleJWTExpiredError();

      // Log the original error for internal debugging, regardless of type
      logger.error('ERROR üí•', err); // Log the original error stack

      // Send response based on the potentially transformed error
      // If it's still not an operational error after specific checks, send generic message
      if (error.isOperational) {
        res.status(error.statusCode).json({
          status: error.status,
          message: error.message
        });
      } else {
        // Send generic message for truly unknown errors
        res.status(500).json({
          status: 'error',
          message: 'ƒê√£ x·∫£y ra l·ªói h·ªá th·ªëng. Vui l√≤ng th·ª≠ l·∫°i sau.'
        });
      }
    }
  }
};

module.exports = errorMiddleware;

/**
 * Middleware x·ª≠ l√Ω l·ªói to√†n c·ª•c
 */
const logger = require('../utils/logger');
const ApiError = require('../utils/apiError'); // Import ApiError for clarity and potential future use

// Helper function to handle specific errors
const handleCastErrorDB = err => {
  const message = `Gi√° tr·ªã kh√¥ng h·ª£p l·ªá ${err.path}: ${err.value}.`;
  return new ApiError(message, 400);
};

const handleValidationErrorDB = err => {
  const errors = Object.values(err.errors).map(el => el.message);
  const message = `D·ªØ li·ªáu nh·∫≠p kh√¥ng h·ª£p l·ªá. ${errors.join('. ')}`;
  return new ApiError(message, 400);
};

// JWT errors are handled in authMiddleware and converted to ApiError (operational)
// const handleJWTError = () => new ApiError('Token kh√¥ng h·ª£p l·ªá. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.', 401);
// const handleJWTExpiredError = () => new ApiError('Token ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.', 401);


const errorMiddleware = (err, req, res, next) => {
  // Log the original error received by the middleware
  console.error('--- ERROR MIDDLEWARE RECEIVED ---');
  console.error('Error Name:', err.name);
  console.error('Error Message:', err.message);
  console.error('Error Status Code:', err.statusCode);
  console.error('Error Stack:', err.stack);
  console.error('---------------------------------');

  let error = { ...err }; // Create a copy to avoid mutating the original err object directly
  error.message = err.message; // Ensure message is copied
  error.statusCode = err.statusCode || 500;
  error.status = err.status || 'error';
  let finalStatusCode = error.statusCode; // Store initial status code

  // Lu√¥n tr·∫£ v·ªÅ c·∫•u tr√∫c JSON nh·∫•t qu√°n cho l·ªói
  const response = {
    success: false, // Lu√¥n l√† false khi c√≥ l·ªói
    status: error.status || 'error', // 'fail' cho l·ªói client, 'error' cho l·ªói server
    message: error.message || 'ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën'
  };

  // M√¥i tr∆∞·ªùng development: th√™m chi ti·∫øt l·ªói
  if (process.env.NODE_ENV === 'development') {
    response.error = { ...err }; // Sao ch√©p l·ªói g·ªëc
    response.stack = err.stack;
  }
  // M√¥i tr∆∞·ªùng production: x·ª≠ l√Ω l·ªói c·ª• th·ªÉ ƒë·ªÉ c√≥ th√¥ng b√°o th√¢n thi·ªán h∆°n
  else {
    // X·ª≠ l√Ω c√°c l·ªói c·ª• th·ªÉ tr∆∞·ªõc khi g·ª≠i response
    let processedError = error; // Use a temporary variable
    if (processedError.name === 'CastError') processedError = handleCastErrorDB(processedError);
    if (processedError.name === 'ValidationError') processedError = handleValidationErrorDB(processedError);
    // JWT errors ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω v√† chuy·ªÉn th√†nh ApiError (isOperational=true)

    // N·∫øu l·ªói l√† operational (ƒë√£ bi·∫øt, v√≠ d·ª• ApiError), s·ª≠ d·ª•ng th√¥ng b√°o v√† status code c·ªßa n√≥
    if (processedError.isOperational) {
      response.status = processedError.status;
      response.message = processedError.message;
      finalStatusCode = processedError.statusCode; // Update status code from processed error
    }
    // N·∫øu l√† l·ªói kh√¥ng x√°c ƒë·ªãnh (l·ªói server), ghi log v√† g·ª≠i th√¥ng b√°o chung
    else {
      logger.error('ERROR üí•', err); // Log l·ªói g·ªëc kh√¥ng x√°c ƒë·ªãnh
      response.status = 'error';
      response.message = 'ƒê√£ x·∫£y ra l·ªói h·ªá th·ªëng. Vui l√≤ng th·ª≠ l·∫°i sau.';
      finalStatusCode = 500; // Ensure statusCode is 500 for unknown server errors
    }
  }

  // G·ª≠i response l·ªói using the final determined status code
  res.status(finalStatusCode).json(response);
};

module.exports = errorMiddleware;

version: '3.8'

services:
  tarot-backend:
    build: .
    container_name: tarot_backend_app
    restart: unless-stopped
    # env_file: .env # REMOVED: Production env vars should be managed securely, not via .env file
    environment:
      - NODE_ENV=production # Ensure production mode
      # MONGODB_URI should point to the mongo service within the Docker network
      # IMPORTANT: Add credentials if MongoDB authentication is enabled
      - MONGODB_URI=mongodb://mongo:27017/tarot_prod 
      # PORT is exposed by Dockerfile, no need to set here unless overriding
      # - PORT=5005
      # IMPORTANT: Replace with your actual frontend production URL(s)
      - CORS_ORIGIN=https://your-frontend-domain.com 
      # Add other necessary production environment variables here (e.g., JWT_SECRET)
      # - JWT_SECRET=your_strong_production_secret 
    ports:
      # Map host port 5005 to container port 5005 (where the app listens)
      - "5005:5005"
    depends_on:
      - mongo
    networks:
      - tarot-network
    # REMOVED volumes mount for production - code should be in the image
    # volumes: 
    #   - .:/app 
    #   - /app/node_modules 
    healthcheck:
      # Healthcheck uses the internal port
      test: ["CMD", "curl", "-f", "http://localhost:5005/health"] 
      interval: 30s 
      timeout: 10s # Chờ tối đa 10 giây cho phản hồi
      retries: 3 
      start_period: 60s 
    # REMOVED tty and stdin_open - not needed for backend service
    # tty: true
    # stdin_open: true

  mongo:
    image: mongo:6.0 # Pin to a specific major version (e.g., 6.0)
    container_name: tarot_mongo_db
    restart: unless-stopped
    # IMPORTANT: Enable authentication for production
    # environment:
    #   MONGO_INITDB_ROOT_USERNAME: your_mongo_root_user # Use secrets management
    #   MONGO_INITDB_ROOT_PASSWORD: your_mongo_root_password # Use secrets management
    #   MONGO_INITDB_DATABASE: tarot_prod 
    # REMOVED ports exposure for production - connect via internal network
    # ports:
    #   - "27017:27017" 
    volumes:
      - mongo-data:/data/db # Persist data
    networks:
      - tarot-network

volumes:
  mongo-data:
    driver: local

networks:
  tarot-network:
    driver: bridge
